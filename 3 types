

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.util.HashSet;
    import java.util.List;
    import java.util.PriorityQueue;
    public class Tester
    {
    public static void main(String args[]) throws NumberFormatException, IOException
    {
            
            BufferedReader s = new BufferedReader(new InputStreamReader(System.in));
     
        	PriorityQueue<Edge> pq=new PriorityQueue<Edge>();
        	String[] line = s.readLine().split(" "); 
    		HashSet<Integer> man=new HashSet<Integer>();
    		HashSet<Integer> woman=new HashSet<Integer>();
    	    
    		int n = Integer.parseInt(line[0]);
    		int m = Integer.parseInt(line[1]);
    		
    		for(int i=0;i<m;i++)
    		{
    			String[] li = s.readLine().split(" "); 
    			int a = Integer.parseInt(li[0]);
    			int b = Integer.parseInt(li[1]);
    			int c = Integer.parseInt(li[2]);
    			if(c==1 || c==3)
    			{
    				man.add(a);
    				man.add(b);
    			}
    			if(c==2 || c==3)
    			{
    				woman.add(a);
    				woman.add(b);
    			}
    			int ev=1;
    			if(c==3)ev=0;
    			if(c==2)ev=2;
    			Edge e=new Edge(a-1,b-1,ev);
    			pq.add(e);
    		}
    		if(man.size()!=n || woman.size()!=n)
    		{
    			System.out.println("-1");
    		}
    		else
    		{
    		DisjointUnionSets ds=new DisjointUnionSets(n);
            int ans=0;
             while(!pq.isEmpty())
            {
            	Edge e=pq.poll();
            	if(e.getWeight()==0)
            	{
            	if(ds.findSet(e.v1,1)!=ds.findSet(e.v2,1))
            	{
            	ds.union(e.v1,e.v2,1);
            	ans+=1;
            	ds.union(e.v1,e.v2,2);	
            	}
            	}
            	else if(e.getWeight()==1)
            	{
            		if(ds.findSet(e.v1,1)!=ds.findSet(e.v2,1))
            		{	
            			ds.union(e.v1,e.v2,1);	
                    	ans+=1;
            		}
            	}
            	else if(e.getWeight()==2)
            	{
            		if(ds.findSet(e.v1,2)!=ds.findSet(e.v2,2))
            		{	
            				ds.union(e.v1,e.v2,2);
            				ans+=1;
                    }
            	}
            	 
            }	
            	
        	   System.out.println(m-ans);
    		} 
         
           
    }
        }
     
    class Edge implements Comparable<Edge>{
    	public int v1,v2,weight;
    	Edge(int v1,int v2,int weight){
    		this.v1 = v1;
    		this.v2= v2;
    		this.weight=weight;
    	}
    	
    	public int getV1() {
    		return v1;
    	}
    	public void setV1(int v1) {
    		this.v1 = v1;
    	}
    	public int getV2() {
    		return v2;
    	}
    	public void setV2(int v2) {
    		this.v2 = v2;
    	}
    	public int getWeight() {
    		return weight;
    	}
    	public void setWeight(int weight) {
    		this.weight = weight;
    	}
    	  @Override
          public int compareTo(Edge edge) 
          {
    		  return -(edge.getWeight()-this.weight);
          }
    }	  
     
     class DisjointUnionSets {
    	
    	int[] rank, mparent,wparent;
    	int n;
    	
    	public DisjointUnionSets(int n) {
    		rank = new int[n];
    		mparent = new int[n];
    		wparent = new int[n];
    		
    		this.n=n;
    		makeSet();
    	}
    	
    	void makeSet() {
    		
    		for(int i=0;i<n;i++){  
    			mparent[i] = i;
    			wparent[i] = i;
    			
    		}
    	}
    	
    	int findSet(int x,int c){
    		if(c==1)
    		{
    		if(mparent[x]!=x){ 
    			
    			mparent[x] = findSet(mparent[x],c);
    			
    		}
    			
    		return mparent[x];
    		}
    		else
    		{
    			if(wparent[x]!=x){ 
    				
    				wparent[x] = findSet(wparent[x],c);
    				
    			}
    				
    			return wparent[x];
    		
    		}
    		}
    	
    	void union(int x, int y,int c){ 	
    		int xRoot = findSet(x,c); 
    		int yRoot = findSet(y,c); 
    		if(xRoot == yRoot)  
    			return ;
    		if(c==1)
    		{
    		mparent[xRoot]=yRoot;
    		}
    		else
    		{
    		wparent[xRoot]=yRoot;
    		}
    		
    	}
     
     } 

Language: Java
