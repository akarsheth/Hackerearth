import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;
import java.util.PriorityQueue;
public class Check_it 
{
	  public static void main(String args[]) throws NumberFormatException, IOException
	    {
	            
	        BufferedReader s = new BufferedReader(new InputStreamReader(System.in));
	        int t=Integer.parseInt(s.readLine());
	        for(int l=0;l<t;l++)
	        {
	        	
	        	String in[]=s.readLine().split(" ");
	        	int n=Integer.parseInt(in[0]);
	        	int m=Integer.parseInt(in[1]);
	        	DisjointUnionSets ds=new DisjointUnionSets(n+1);
	        	String edges[]=new String[m+1];
	        	for(int i=1;i<=m;i++)
	        	{
	        		edges[i]=s.readLine();
	        	}
	        	String input[]=s.readLine().split(" ");
	        	int arr[]=new int[n+1];
	        	for(int i=1;i<=n-1;i++)
	        	{
	        		arr[i]=Integer.parseInt(input[i-1]);
	        	}
	        	boolean flag=false;
	        	for(int i=1;i<=n-1;i++)
	        	{
	        		String edge[]=edges[arr[i]].split(" ");
	        		int c=Integer.parseInt(edge[0]);
	        		int b=Integer.parseInt(edge[1]);
	        		if(ds.findSet(c)==ds.findSet(b))
	        		{
	        			flag=true;
	        		}
	        		else
	        			ds.union(c, b);
	        	}
	        	if(flag)
	        		System.out.println("NO");
	        	else
	        		System.out.println("YES");
	        	
	        	
	        }
	    }
}
class DisjointUnionSets 
{
	
	int[] rank, parent;
	int n;
	
	public DisjointUnionSets(int n) 
	{
		rank = new int[n];
		parent = new int[n];
		this.n=n;
		makeSet();
	}
	
	void makeSet() 
	{
		
		for(int i=0;i<n;i++)
		{  // Initially, all elements are in their own set.
			parent[i] = i;
		}
	}
	
	int findSet(int x)
	{ 
		if(parent[x]!=x)
		{ 
			
			parent[x] = findSet(parent[x]);
		}
			
		return parent[x];
	}
	
	void union(int x, int y)
	{ 	
		int xRoot = findSet(x); 
		int yRoot = findSet(y); 
		if(xRoot == yRoot)  
			return;
		if(rank[xRoot]<rank[yRoot]){ 
			parent[xRoot] = yRoot; 
		}
		
		else if(rank[yRoot]<rank[xRoot]){ 
			parent[yRoot] = xRoot; 
		}
		
		else{
			parent[yRoot] = xRoot; 
			rank[xRoot] = rank[xRoot] + 1;  
		}
	}

} 


