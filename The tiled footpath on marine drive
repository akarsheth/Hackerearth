import java.io.*;
import java.util.*;

class The_tiled_footpath_on_marine_drive 
{
	static long arr[]=new long[10000000];
	public static void main(String args[]) throws NumberFormatException, IOException
	{
		InputReader in = new InputReader(System.in);
		OutputStream outputStream = System.out;
		PrintWriter out = new PrintWriter(outputStream);
		
		int t=in.nextInt();
		for(int i=0;i<t;i++)
		{
			long n=in.nextLong();
			long k=in.nextLong();
			long mod=1<<k;
			out.println(getNthfibo(n+1,mod)%mod);
		}
		out.close();
	}
	   public static long getNthfibo(long n,long mod)
	   {
	   
	        if (n <= 1) return n;

	        long[][] result = {{1, 0}, {0, 1}}; // identity matrix.
	        long[][] fiboM = {{1, 1}, {1, 0}};

	        while (n > 0) 
	        {
	            if (n%2 == 1)
	            {
	                multMatrix(result, fiboM,mod);
	            }
	            n = n / 2;
	            multMatrix(fiboM, fiboM,mod);
	        }

	        return result[1][0];
	    }

	    private static void multMatrix(long[][] m, long [][] n,long mod) 
	    {
	        long a = ((m[0][0] * n[0][0])%mod +  (m[0][1] * n[1][0])%mod)%mod;
	        long b = ((m[0][0] * n[0][1])%mod +  (m[0][1] * n[1][1])%mod)%mod;
	        long c = ((m[1][0] * n[0][0])%mod +  (m[1][1] * n[0][1])%mod)%mod;
	        long d = ((m[1][0] * n[0][1])%mod +  (m[1][1] * n[1][1])%mod)%mod;

	        m[0][0] = a;
	        m[0][1] = b;
	        m[1][0] = c;
	        m[1][1] = d;
	    }


}

class Pair implements Comparable<Pair>{
	int r1=-1;
	int r2=-1;
	int extra=0;
	@Override
	public int compareTo(Pair arg0) {
		// TODO Auto-generated method stub
		return 0;
	}
}

class InputReader {
	public BufferedReader reader;
	public StringTokenizer tokenizer;

	public InputReader(InputStream inputstream) {
		reader = new BufferedReader(new InputStreamReader(inputstream));
		tokenizer = null;
	}

	public String nextLine(){
		String fullLine=null;
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				fullLine=reader.readLine();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
			return fullLine;
		}
		return fullLine;
	}
	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}
	public long nextLong() {
		return Long.parseLong(next());
	}
	public int nextInt() {
		return Integer.parseInt(next());
	}
}
 


